rules:
  - id: Stack-based-Buffer-Overflow
    metadata:
      confidence: MEDIUM
      category: security
      cwe:
        - "CWE-121: Stack-based Buffer Overflow"
      vulnerability_class:
        - Memory Issues
      references:
        - https://cwe.mitre.org/data/definitions/121.html
    languages:
      - c
      - c++
    severity: ERROR
    message: >
      A stack-based buffer overflow condition is a condition where the buffer
      being overwritten is allocated on the stack (i.e., is a local variable or,
      rarely, a parameter to a function). "Stack Overflow" is often used to mean
      the same thing as stack-based buffer overflow, however it is also used on
      occasion to mean stack exhaustion, usually a result from an excessively
      recursive function call. Due to the ambiguity of the term, use of stack
      overflow to describe either circumstance is discouraged.
    patterns:
      - pattern: $FUNC($VAR, ...)
      - pattern-not-inside: |
          $FUNC($VAR, ...,sizeof($VAR) ...)
      - pattern-not-inside: |
          if (strlen($X) < sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (strlen($X) <= sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (strlen($X) >= sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (sizeof($X) < sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (sizeof($X) <= sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (sizeof($X) >= sizeof($Y)){
            ...
            $FUNC($Y, ... ,$X);
          }
      - pattern-not-inside: |
          if (sizeof($Y) > sizeof($X)){
            ...
            $FUNC($X, ... ,$Y);
          }
      - pattern-not-inside: |
          if (strlen($Y) > sizeof($X)){
            ...
            $FUNC($X, ... ,$Y);
          }
      - metavariable-regex:
          metavariable: $FUNC
          regex: (strcpy$|strcat$|sprintf$|gets$|scanf$|memcpy$|memmove$|strncat$|vsprintf$|wcsncpy$|memset$|wcscat$|wmemset$|wcscpy$)
