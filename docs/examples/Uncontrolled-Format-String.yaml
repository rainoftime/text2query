rules:
  - id: Uncontrolled-Format-String
    metadata:
      confidence: MEDIUM
      category: security
      cwe:
        - "CWE-134: Use of Externally-Controlled Format String"
      vulnerability_class:
        - Memory Issues
      references:
        - https://cwe.mitre.org/data/definitions/134.html
    languages:
      - c
      - c++
    severity: WARNING
    message: >
      The product uses a function that accepts a format string as an argument,
      but the format string originates from an external source. When an attacker
      can modify an externally-controlled format string, this can lead to buffer
      overflows, denial of service, or data representation problems.

      It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.
    patterns:
      - pattern: $FUNC($VAR, ...)
      - pattern-not-inside: |
          $FUNC($VAR, "%s\n", ...);
      - pattern-not-inside: |
          wcscpy($VAR, "...");
          ...
          $FUNC($VAR,  ...);
      - pattern-not-inside: |
          $FUNC($VAR, "%s", ...);
      - pattern-not-inside: |
          $FUNC(... , ... , "... %s ...", $VAR);
      - pattern-not-inside: |
          strcpy($VAR,"...");
          ...
          $FUNC(...,$VAR);
      - pattern-not-inside: |
          $FUNC("...", ...)
      - metavariable-regex:
          metavariable: $FUNC
          regex: (printWrapper$|printf$|sprintf$|fprintf$|syslog$|vsprintf$|fputs$|strtod$|strtol$|log$|setlocale$)
