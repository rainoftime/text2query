rules:
  - id: Use-After-Free
    metadata:
      confidence: MEDIUM
      category: security
      cwe:
        - "CWE-416: Use After Free"
      vulnerability_class:
        - Memory Issues
      references:
        - https://cwe.mitre.org/data/definitions/416.html?
    languages:
      - c
      - c++
    severity: ERROR
    message: >
      The product reuses or references memory after it has been freed. At some
      point afterward, the memory may be allocated again and saved in another
      pointer, while the original pointer references a location somewhere within
      the new allocation. Any operations using the original pointer are no
      longer valid because the memory "belongs" to the code that operates on the
      new pointer.
    pattern-either:
    - patterns:
      - pattern: |
          free($PTR);
          ...
          $FUN(..., $PTR);
      - pattern-not: |
          free($PTR);
          ...
          $PTR = ...;
          ...
          $FUN(..., $PTR);
    - patterns:
      - pattern: |
          free($VAR);
          ...
          $FUN(..., *$VAR);
      - pattern-not: |
          free($VAR);
          ...
          $PTR = ...;
          ...
          $FUN(..., *$VAR);
    - patterns:
      - pattern: |
          free($VAR);
          ...
          $FUN(..., $VAR);
      - pattern-not: |
          free($VAR);
          ...
          $PTR = ...;
          ...
          $FUN(..., $VAR);
    - patterns:
      - pattern: |
          free($ARRAY);
          ...
          $FUN(..., $ARRAY[...]);
      - pattern-not: |
          free($ARRAY);
          ...
          $PTR = ...;
          ...
          $FUN(..., $ARRAY[...]);
    - patterns:

      - pattern: |

          if ($COND){

          ...

          free($PTR);

          ...

          }

          ...

          free($PTR);

      - pattern-not: |

          if ($COND){

          ...

          free($PTR);

          ...

          $PTR = $EXPR;

          ...

          }

          ...

          free($PTR);

      - pattern-not: |

          if ($COND){

          ...

          free($PTR);

          return ...;

          ...

          }

          ...

          free($PTR);

      - pattern-not: |

          if ($COND){

          ...

          free($PTR);

          ...

          }

          ...

          $PTR = $EXPR;

          ...

          free($PTR);

    - patterns:

      - pattern-inside: |

          $FTYPE $FUNC(..., $TYPE $ARG, ...){

          ...

          free($ARG);

          ...

          }

      - pattern-not-inside: |

          $FTYPE $FUNC(..., $TYPE $ARG, ...){

          ...

          free($ARG);

          ...

          $ARG = $EXPR;

          ...

          }
    - patterns:

      - pattern: |

          delete [] $PTR;

          ...

          delete [] $PTR;

      - pattern-not: |

          delete [] $PTR;

          ...

          $PTR = $EXPR;

          ...

          delete [] $PTR;
    - patterns:

      - pattern: |

          delete $PTR;

          ...

          delete $PTR;

      - pattern-not: |

          delete $PTR;

          ...

          $PTR = $EXPR;

          ...

          delete $PTR;

